{
  "address": "0xdbe147fc80b49871e2a8D60cc89D51b11bc88b35",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_founderPass",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "AlienBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "AlienMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "AlienStolen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "MarineBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "MarineMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "MarineStolen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PAID_TOKENS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "airdropMintingCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "aliases",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "existingCombinations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "founderPass",
      "outputs": [
        {
          "internalType": "contract IFounderPass",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPaidTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenTraits",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isMarine",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "M_Weapon",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "M_Back",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "M_Headgear",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "M_Eyes",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "M_Emblem",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "M_Body",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "A_Headgear",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "A_Eye",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "A_Back",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "A_Mouth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "A_Body",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "rankIndex",
              "type": "uint8"
            }
          ],
          "internalType": "struct IMnA.MarineAlien",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenWriteBlock",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAirdropStage",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isMarine",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintForAirdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minted",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomSeedGenerator",
      "outputs": [
        {
          "internalType": "contract IRandomSeedGenerator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rarities",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_airdropMintingCount",
          "type": "uint256"
        }
      ],
      "name": "setAirdropMintingCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isAirdropStage",
          "type": "bool"
        }
      ],
      "name": "setAirdropStage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_traits",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_randomSeedGenerator",
          "type": "address"
        }
      ],
      "name": "setContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_paidTokens",
          "type": "uint256"
        }
      ],
      "name": "setPaidTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "setPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingPool",
      "outputs": [
        {
          "internalType": "contract IStakingPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "traits",
      "outputs": [
        {
          "internalType": "contract ITraits",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "tokenIds",
          "type": "uint16[]"
        }
      ],
      "name": "updateOriginAccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdrawUnClaimed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe65ca9f0741f4e9007ca0c6841b84a24256afe7e21bc1b3410970302dce50d38",
  "receipt": {
    "to": null,
    "from": "0x13576B3C22F9625156deb8866B8941637036a08F",
    "contractAddress": "0xdbe147fc80b49871e2a8D60cc89D51b11bc88b35",
    "transactionIndex": 25,
    "gasUsed": "5413158",
    "logsBloom": "0x
    "blockHash": "0x5173dcaa709cc78924fb62a51aa163bbe7913dd49251a116d0877e4307c6845f",
    "transactionHash": "0xe65ca9f0741f4e9007ca0c6841b84a24256afe7e21bc1b3410970302dce50d38",
    "logs": [
      {
        "transactionIndex": 25,
        "blockNumber": 24836058,
        "transactionHash": "0xe65ca9f0741f4e9007ca0c6841b84a24256afe7e21bc1b3410970302dce50d38",
        "address": "0xdbe147fc80b49871e2a8D60cc89D51b11bc88b35",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000013576b3c22f9625156deb8866b8941637036a08f"
        ],
        "data": "0x",
        "logIndex": 95,
        "blockHash": "0x5173dcaa709cc78924fb62a51aa163bbe7913dd49251a116d0877e4307c6845f"
      },
      {
        "transactionIndex": 25,
        "blockNumber": 24836058,
        "transactionHash": "0xe65ca9f0741f4e9007ca0c6841b84a24256afe7e21bc1b3410970302dce50d38",
        "address": "0xdbe147fc80b49871e2a8D60cc89D51b11bc88b35",
        "topics": [
          "0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258"
        ],
        "data": "0x00000000000000000000000013576b3c22f9625156deb8866b8941637036a08f",
        "logIndex": 96,
        "blockHash": "0x5173dcaa709cc78924fb62a51aa163bbe7913dd49251a116d0877e4307c6845f"
      },
      {
        "transactionIndex": 25,
        "blockNumber": 24836058,
        "transactionHash": "0xe65ca9f0741f4e9007ca0c6841b84a24256afe7e21bc1b3410970302dce50d38",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000013576b3c22f9625156deb8866b8941637036a08f",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x00000000000000000000000000000000000000000000000003c18a706d7f0afa00000000000000000000000000000000000000000000000637a547b747946cc400000000000000000000000000000000000000000000a57493ca04247b2ba8ae00000000000000000000000000000000000000000000000633e3bd46da1561ca00000000000000000000000000000000000000000000a574978b8e94e8aab3a8",
        "logIndex": 97,
        "blockHash": "0x5173dcaa709cc78924fb62a51aa163bbe7913dd49251a116d0877e4307c6845f"
      }
    ],
    "blockNumber": 24836058,
    "cumulativeGasUsed": "8996237",
    "status": 1,
    "byzantium": true
  },
  "args": ["0xf4a57Dac3D3a4772347F813c6bF52b6286ac649e"],
  "numDeployments": 1,
  "solcInputHash": "71036bc916121f26ce4458c835fb3c3a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_founderPass\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AlienBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AlienMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AlienStolen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MarineBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MarineMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MarineStolen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PAID_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropMintingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"aliases\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"existingCombinations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"founderPass\",\"outputs\":[{\"internalType\":\"contract IFounderPass\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaidTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenTraits\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isMarine\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"M_Weapon\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"M_Back\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"M_Headgear\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"M_Eyes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"M_Emblem\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"M_Body\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"A_Headgear\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"A_Eye\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"A_Back\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"A_Mouth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"A_Body\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rankIndex\",\"type\":\"uint8\"}],\"internalType\":\"struct IMnA.MarineAlien\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenWriteBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAirdropStage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isMarine\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintForAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomSeedGenerator\",\"outputs\":[{\"internalType\":\"contract IRandomSeedGenerator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rarities\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_airdropMintingCount\",\"type\":\"uint256\"}],\"name\":\"setAirdropMintingCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isAirdropStage\",\"type\":\"bool\"}],\"name\":\"setAirdropStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_traits\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_randomSeedGenerator\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_paidTokens\",\"type\":\"uint256\"}],\"name\":\"setPaidTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPool\",\"outputs\":[{\"internalType\":\"contract IStakingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traits\",\"outputs\":[{\"internalType\":\"contract ITraits\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"updateOriginAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawUnClaimed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAdmin(address)\":{\"params\":{\"addr\":\"the address to enable\"}},\"isMarine(uint256)\":{\"params\":{\"tokenId\":\"the ID of the token to check\"},\"returns\":{\"_0\":\"marine - whether or not a token is a Marines\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"removeAdmin(address)\":{\"params\":{\"addr\":\"the address to disbale\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addAdmin(address)\":{\"notice\":\"enables an address to mint / burn\"},\"burn(uint256)\":{\"notice\":\"Burn a token - any game logic should be handled before this function.\"},\"isMarine(uint256)\":{\"notice\":\"checks if a token is a Marines\"},\"mint(address,uint256)\":{\"notice\":\"Mint a token - any payment / game logic should be handled in the game contract.  This will just generate random traits and mint a token to a designated address.\"},\"removeAdmin(address)\":{\"notice\":\"disables an address from minting / burning\"},\"setAirdropMintingCount(uint256)\":{\"notice\":\"set the number of tokens to mint at a time for airdrop.\"},\"setAirdropStage(bool)\":{\"notice\":\"start or end airdrop stage\"},\"setPaidTokens(uint256)\":{\"notice\":\"updates the number of tokens for sale\"},\"setPaused(bool)\":{\"notice\":\"enables owner to pause / unpause minting\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MnA.sol\":\"MnA\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/MnA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport \\\"./interfaces/IMnA.sol\\\";\\nimport \\\"./interfaces/IStakingPool.sol\\\";\\nimport \\\"./interfaces/ITraits.sol\\\";\\nimport \\\"./interfaces/IRandomSeedGenerator.sol\\\";\\nimport \\\"./interfaces/IFounderPass.sol\\\";\\n\\nimport \\\"./libraries/ERC721A.sol\\\";\\n\\n\\ncontract MnA is IMnA, IERC721Receiver, ERC721Enumerable, Ownable, Pausable {\\n\\n    struct LastWrite {\\n        uint64 time;\\n        uint64 blockNum;\\n    }\\n\\n    event MarineMinted(uint256 indexed tokenId);\\n    event AlienMinted(uint256 indexed tokenId);\\n    event MarineStolen(uint256 indexed tokenId);\\n    event AlienStolen(uint256 indexed tokenId);\\n    event MarineBurned(uint256 indexed tokenId);\\n    event AlienBurned(uint256 indexed tokenId);\\n\\n    // max number of tokens that can be minted\\n    uint256 public maxTokens = 27997;\\n    // number of tokens that can be airdropped for a fee\\n    uint256 public PAID_TOKENS = 6969;\\n    // number of tokens that admin can mint for airdrop at a time\\n    uint256 public airdropMintingCount = 100;\\n    // number of tokens have been minted so far\\n    uint16 public override minted;\\n    // flag to show airdrop stage\\n    bool public isAirdropStage;\\n\\n    // mapping from tokenId to a struct containing the token's traits\\n    mapping(uint256 => MarineAlien) private tokenTraits;\\n    // mapping from hashed(tokenTrait) to the tokenId it's associated with\\n    // used to ensure there are no duplicates\\n    mapping(uint256 => uint256) public existingCombinations;\\n    // Tracks the last block and timestamp that a caller has written to state.\\n    // Disallow some access to functions if they occur while a change is being written.\\n    mapping(address => LastWrite) private lastWriteAddress;\\n    mapping(uint256 => LastWrite) private lastWriteToken;\\n\\n    // list of probabilities for each trait type\\n    // 0 - 5 are associated with Marine, 6 - 11 are associated with Aliens\\n    uint8[][12] public rarities;\\n    // list of aliases for Walker's Alias algorithm\\n    // 0 - 5 are associated with Marine, 6 - 11 are associated with Aliens\\n    uint8[][12] public aliases;\\n\\n    // reference to the Tower contract to allow transfers to it without approval\\n    IStakingPool public stakingPool;\\n    // reference to Traits\\n    ITraits public traits;\\n    // random seed generator\\n    IRandomSeedGenerator public randomSeedGenerator;\\n    // founder pass\\n    IFounderPass public founderPass;\\n\\n    // address => allowedToCallFunctions\\n    mapping(address => bool) private admins;\\n\\n    constructor(address _founderPass) ERC721(\\\"Marines & Aliens Game\\\", \\\"MnA\\\") {\\n        _pause();\\n\\n        // A.J. Walker's Alias Algorithm\\n        // Marines\\n        // Weapon\\n        rarities[0] =  [255, 38, 50, 237, 211, 201, 248, 61, 8, 45, 106, 18, 122, 49, 45, 34, 19, 16];\\n        aliases[0] = [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9, 11];\\n        // Back\\n        rarities[1] = [255, 204, 30, 225, 71, 245, 196, 81, 40, 28, 20];\\n        aliases[1] = [0, 0, 1, 2, 3, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 4];        \\n        // Headgear\\n        rarities[2] = [255, 188, 14, 219, 208, 239, 55, 75, 137, 239, 126, 47, 245, 221, 163, 122, 81, 40];\\n        aliases[2] = [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 6, 7, 8, 11];\\n        // Eyes\\n        rarities[3] = [255, 38, 50, 237, 211, 201, 248, 61, 8, 45, 106, 18, 122, 49, 45, 34, 19, 16];\\n        aliases[3] = [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9, 11];\\n        // Emblem\\n        rarities[4] = [255, 151, 239, 219, 215, 104, 18, 229, 208, 229, 26, 112, 231, 118, 47, 245, 196, 163, 122, 65];\\n        aliases[4] = [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0, 0, 0, 0, 1, 1, 2, 3, 4, 5, 6, 6, 7, 8, 10, 11, 14];\\n        // Body\\n        rarities[5] = [255, 73, 114, 186, 43, 204, 184, 204, 241, 55, 198, 102, 30, 245, 204, 163, 131, 98, 65, 40];\\n        aliases[5] = [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 3, 4, 4, 5, 6, 7, 9, 12];\\n\\n        // Aliens\\n        // Headgear\\n        rarities[6] = [255, 71, 163, 102, 122, 163, 51, 245, 180, 86, 20];\\n        aliases[6] = [0, 0, 1, 2, 3, 4, 5, 0, 0, 0, 1, 1, 2, 3, 4, 6];\\n        // Eye\\n        rarities[7] = [255, 112, 204, 102, 81, 184, 71, 245, 163, 61, 20];\\n        aliases[7] = [0, 0, 1, 2, 3, 4, 5, 0, 0, 0, 1, 1, 2, 3, 4, 6];\\n        // Back\\n        rarities[8] = [255, 245, 143, 81, 61, 122, 10, 204, 163, 81, 20];\\n        aliases[8] = [0, 0, 1, 2, 3, 4, 5, 0, 0, 0, 0, 1, 2, 3, 4, 6];          \\n        // Mouth\\n        rarities[9] = [255, 245, 143, 81, 61, 122, 10, 204, 163, 81, 20];\\n        aliases[9] = [0, 0, 1, 2, 3, 4, 5, 0, 0, 0, 0, 1, 2, 3, 4, 6];\\n        // Body\\n        rarities[10] = [255, 51, 143, 40, 20, 122, 51, 204, 163, 122, 20];\\n        aliases[10] = [0, 0, 1, 2, 3, 4, 5, 0, 0, 0, 1, 1, 2, 3, 4, 6];\\n              \\n\\n        // rankIndex\\n        rarities[11] = [255, 79, 165, 25];\\n        aliases[11] = [0, 1, 1, 1];\\n\\n        founderPass = IFounderPass(_founderPass);\\n    }\\n\\n    modifier requireContractsSet() {\\n        require(address(traits) != address(0) && address(stakingPool) != address(0) && address(randomSeedGenerator) != address(0), \\\"Contracts not set\\\");\\n        _;\\n    }\\n\\n    modifier blockIfChangingAddress() {\\n        // frens can always call whenever they want :)\\n        require(admins[_msgSender()] || lastWriteAddress[tx.origin].blockNum < block.number, \\\"hmmmm what doing?\\\");\\n        _;\\n    }\\n\\n    modifier blockIfChangingToken(uint256 tokenId) {\\n        // frens can always call whenever they want :)\\n        require(admins[_msgSender()] || lastWriteToken[tokenId].blockNum < block.number, \\\"hmmmm what doing?\\\");\\n        _;\\n    }\\n\\n    function setContracts(address _traits, address _stakingPool, address _randomSeedGenerator) external onlyOwner {\\n        traits = ITraits(_traits);\\n        stakingPool = IStakingPool(_stakingPool);\\n        randomSeedGenerator = IRandomSeedGenerator(_randomSeedGenerator);\\n    }\\n\\n    function getTokenWriteBlock(uint256 tokenId) external view override returns(uint64) {\\n        require(admins[_msgSender()], \\\"Only admins can call this\\\");\\n        return lastWriteToken[tokenId].blockNum;\\n    }\\n\\n    function mintForAirdrop() external onlyOwner whenNotPaused {\\n        require(isAirdropStage, \\\"Airdrop minting is only available in airdrop stage\\\");\\n        require(PAID_TOKENS > minted, \\\"Airdrop minting completed\\\");\\n        require(address(randomSeedGenerator) != address(0), \\\"random seed generator is null\\\");\\n        \\n        uint256 _mintCount = airdropMintingCount;\\n        if (PAID_TOKENS < minted + airdropMintingCount) _mintCount = PAID_TOKENS - minted;\\n        for (uint256 i = 0; i < _mintCount; i++) {\\n            uint256 randomNumber = uint256(keccak256(abi.encode(randomSeedGenerator.random(), minted)));\\n            mint(address(this), randomNumber);\\n        }\\n    }\\n\\n    function claim() external whenNotPaused {\\n        uint256 balance = founderPass.balanceOf(msg.sender);\\n        for (uint256 index = 0; index < balance; index++) {\\n            uint256 tokenId = founderPass.tokenOfOwnerByIndex(msg.sender, index);\\n            require(IERC721(address(this)).ownerOf(tokenId) == address(this), \\\"Invalid tokenId\\\"); \\n            IERC721(address(this)).safeTransferFrom(address(this), msg.sender, tokenId);\\n        }\\n    }\\n\\n    function withdrawUnClaimed(address recipient, uint256 tokenId) external onlyOwner whenNotPaused {\\n        require(!isAirdropStage, \\\"Can withdraw after airdrop stage ends\\\");\\n        uint256 remainingIds = IMnA(address(this)).balanceOf(address(this));\\n        require(remainingIds > 0, \\\"Nothing to withdraw\\\");\\n        require(IERC721(address(this)).ownerOf(tokenId) == address(this), \\\"Invalid tokenId\\\");\\n        IERC721(address(this)).safeTransferFrom(address(this), recipient, tokenId);\\n    }\\n\\n    /** \\n    * Mint a token - any payment / game logic should be handled in the game contract. \\n    * This will just generate random traits and mint a token to a designated address.\\n    */\\n    function mint(address recipient, uint256 seed) public override whenNotPaused {\\n        require(admins[_msgSender()], \\\"Only admins can call this\\\");\\n        require(minted + 1 <= maxTokens, \\\"All tokens minted\\\");\\n        minted++;\\n        generate(minted, seed, lastWriteAddress[tx.origin]);\\n        if(tx.origin != recipient && recipient != address(stakingPool) && recipient != address(this)) {\\n            // Stolen!\\n            if(tokenTraits[minted].isMarine) {\\n                emit MarineStolen(minted);\\n            }\\n            else {\\n                emit AlienStolen(minted);\\n            }\\n        }\\n        _safeMint(recipient, minted);\\n    }\\n\\n    /**\\n    * Burn a token - any game logic should be handled before this function.\\n    */\\n    function burn(uint256 tokenId) external override whenNotPaused {\\n        require(admins[_msgSender()], \\\"Only admins can call this\\\");\\n        require(ownerOf(tokenId) == tx.origin, \\\"Oops you don't own that\\\");\\n        if(tokenTraits[tokenId].isMarine) {\\n            emit MarineBurned(tokenId);\\n        }\\n        else {\\n            emit AlienBurned(tokenId);\\n        }\\n        _burn(tokenId);\\n    }\\n\\n    function updateOriginAccess(uint16[] memory tokenIds) external override {\\n        require(admins[_msgSender()], \\\"Only admins can call this\\\");\\n        uint64 blockNum = uint64(block.number);\\n        uint64 time = uint64(block.timestamp);\\n        lastWriteAddress[tx.origin] = LastWrite(time, blockNum);\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            lastWriteToken[tokenIds[i]] = LastWrite(time, blockNum);\\n        }\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override(ERC721, IERC721) blockIfChangingToken(tokenId) {\\n        // allow admin contracts to be send without approval\\n        if(!admins[_msgSender()]) {\\n            require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        }\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /** INTERNAL */\\n\\n    /**\\n    * generates traits for a specific token, checking to make sure it's unique\\n    * @param tokenId the id of the token to generate traits for\\n    * @param seed a pseudorandom 256 bit number to derive traits from\\n    * @return t - a struct of traits for the given token ID\\n    */\\n    function generate(uint256 tokenId, uint256 seed, LastWrite memory lw) internal returns (MarineAlien memory t) {\\n        t = selectTraits(seed);\\n        if (existingCombinations[structToHash(t)] == 0) {\\n            tokenTraits[tokenId] = t;\\n            existingCombinations[structToHash(t)] = tokenId;\\n            if(t.isMarine) {\\n                emit MarineMinted(tokenId);\\n            }\\n            else {\\n                emit AlienMinted(tokenId);\\n            }\\n            return t;\\n        }\\n        uint256 nextSeed = uint256(keccak256(abi.encode(randomSeedGenerator.random(), seed)));\\n        return generate(tokenId, nextSeed, lw);\\n    }\\n\\n    /**\\n    * uses A.J. Walker's Alias algorithm for O(1) rarity table lookup\\n    * ensuring O(1) instead of O(n) reduces mint cost by more than 50%\\n    * probability & alias tables are generated off-chain beforehand\\n    * @param seed portion of the 256 bit seed to remove trait correlation\\n    * @param traitType the trait type to select a trait for \\n    * @return the ID of the randomly selected trait\\n    */\\n    function selectTrait(uint16 seed, uint8 traitType) internal view returns (uint8) {\\n        uint8 trait = uint8(seed) % uint8(rarities[traitType].length);\\n        // If a selected random trait probability is selected (biased coin) return that trait\\n        if (seed >> 8 < rarities[traitType][trait]) return trait;\\n        return aliases[traitType][trait];\\n    }\\n\\n    /**\\n    * selects the species and all of its traits based on the seed value\\n    * @param seed a pseudorandom 256 bit number to derive traits from\\n    * @return t -  a struct of randomly selected traits\\n    */\\n    function selectTraits(uint256 seed) internal view returns (MarineAlien memory t) {    \\n        t.isMarine = (seed & 0xFFFF) % 10 != 0;\\n\\n        if (t.isMarine) {\\n            seed >>= 16;    \\n            t.M_Weapon = selectTrait(uint16(seed & 0xFFFF), 0);\\n            seed >>= 16;\\n            t.M_Back = selectTrait(uint16(seed & 0xFFFF), 1);\\n            seed >>= 16;\\n            t.M_Headgear = selectTrait(uint16(seed & 0xFFFF), 2);\\n            seed >>= 16;\\n            t.M_Eyes = selectTrait(uint16(seed & 0xFFFF), 3);\\n            seed >>= 16;\\n            t.M_Emblem = selectTrait(uint16(seed & 0xFFFF), 4);\\n            seed >>= 16;\\n            t.M_Body = selectTrait(uint16(seed & 0xFFFF), 5);\\n        } else {\\n            seed >>= 16;    \\n            t.A_Headgear = selectTrait(uint16(seed & 0xFFFF), 6);\\n            seed >>= 16;\\n            t.A_Eye = selectTrait(uint16(seed & 0xFFFF), 7);\\n            seed >>= 16;\\n            t.A_Back = selectTrait(uint16(seed & 0xFFFF), 8);\\n            seed >>= 16;\\n            t.A_Mouth = selectTrait(uint16(seed & 0xFFFF), 9);\\n            seed >>= 16;\\n            t.A_Body = selectTrait(uint16(seed & 0xFFFF), 10);\\n            seed >>= 16;\\n            t.rankIndex = selectTrait(uint16(seed & 0xFFFF), 11);\\n        }\\n    }\\n\\n    /**\\n    * converts a struct to a 256 bit hash to check for uniqueness\\n    * @param s the struct to pack into a hash\\n    * @return the 256 bit hash of the struct\\n    */\\n    function structToHash(MarineAlien memory s) internal pure returns (uint256) {\\n        return uint256(keccak256(\\n            abi.encodePacked(\\n                s.isMarine,\\n                s.M_Weapon,\\n                s.M_Back,\\n                s.M_Headgear,\\n                s.M_Eyes,\\n                s.M_Emblem,\\n                s.M_Body,\\n                s.A_Headgear,\\n                s.A_Eye,\\n                s.A_Back,\\n                s.A_Mouth,\\n                s.A_Body,\\n                s.rankIndex\\n            )\\n        ));\\n    }\\n\\n    /** READ */\\n\\n    /**\\n    * checks if a token is a Marines\\n    * @param tokenId the ID of the token to check\\n    * @return marine - whether or not a token is a Marines\\n    */\\n    function isMarine(uint256 tokenId) external view override blockIfChangingToken(tokenId) returns (bool) {\\n        // Sneaky aliens will be slain if they try to peep this after mint. Nice try.\\n        IMnA.MarineAlien memory s = tokenTraits[tokenId];\\n        return s.isMarine;\\n    }\\n\\n    function getMaxTokens() external view override returns (uint256) {\\n        return maxTokens;\\n    }\\n\\n    function getPaidTokens() external view override returns (uint256) {\\n        return PAID_TOKENS;\\n    }\\n\\n    /**\\n    * updates the number of tokens for sale\\n    */\\n    function setPaidTokens(uint256 _paidTokens) external onlyOwner {\\n        PAID_TOKENS = uint16(_paidTokens);\\n    }\\n\\n    /**\\n     * start or end airdrop stage\\n     */\\n    function setAirdropStage(bool _isAirdropStage) external onlyOwner {\\n        isAirdropStage = _isAirdropStage;\\n    }\\n\\n    /**\\n     * set the number of tokens to mint at a time for airdrop.\\n     */\\n    function setAirdropMintingCount(uint256 _airdropMintingCount) external onlyOwner {\\n        airdropMintingCount = _airdropMintingCount;\\n    }\\n\\n    /**\\n    * enables owner to pause / unpause minting\\n    */\\n    function setPaused(bool _paused) external requireContractsSet onlyOwner {\\n        if (_paused) _pause();\\n        else _unpause();\\n    }\\n\\n    /**\\n    * enables an address to mint / burn\\n    * @param addr the address to enable\\n    */\\n    function addAdmin(address addr) external onlyOwner {\\n        admins[addr] = true;\\n    }\\n\\n    /**\\n    * disables an address from minting / burning\\n    * @param addr the address to disbale\\n    */\\n    function removeAdmin(address addr) external onlyOwner {\\n        admins[addr] = false;\\n    }\\n\\n    function getTokenTraits(uint256 tokenId) external view override blockIfChangingAddress blockIfChangingToken(tokenId) returns (MarineAlien memory) {\\n        return tokenTraits[tokenId];\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override blockIfChangingAddress blockIfChangingToken(tokenId) returns (string memory) {\\n        require(_exists(tokenId), \\\"Token ID does not exist\\\");\\n        return traits.tokenURI(tokenId);\\n    }\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override(ERC721Enumerable, IERC721Enumerable) blockIfChangingAddress returns (uint256) {\\n        require(admins[_msgSender()] || lastWriteAddress[owner].blockNum < block.number, \\\"hmmmm what doing?\\\");\\n        uint256 tokenId = super.tokenOfOwnerByIndex(owner, index);\\n        require(admins[_msgSender()] || lastWriteToken[tokenId].blockNum < block.number, \\\"hmmmm what doing?\\\");\\n        return tokenId;\\n    }\\n    \\n    function balanceOf(address owner) public view virtual override(ERC721, IERC721) blockIfChangingAddress returns (uint256) {\\n        require(admins[_msgSender()] || lastWriteAddress[owner].blockNum < block.number, \\\"hmmmm what doing?\\\");\\n        return super.balanceOf(owner);\\n    }\\n\\n    function ownerOf(uint256 tokenId) public view virtual override(ERC721, IERC721) blockIfChangingAddress blockIfChangingToken(tokenId) returns (address) {\\n        address addr = super.ownerOf(tokenId);\\n        require(admins[_msgSender()] || lastWriteAddress[addr].blockNum < block.number, \\\"hmmmm what doing?\\\");\\n        return addr;\\n    }\\n\\n    function tokenByIndex(uint256 index) public view virtual override(ERC721Enumerable, IERC721Enumerable) returns (uint256) {\\n        uint256 tokenId = super.tokenByIndex(index);\\n        require(admins[_msgSender()] || lastWriteToken[tokenId].blockNum < block.number, \\\"hmmmm what doing?\\\");\\n        return tokenId;\\n    }\\n\\n    function approve(address to, uint256 tokenId) public virtual override(ERC721, IERC721) blockIfChangingToken(tokenId) {\\n        super.approve(to, tokenId);\\n    }\\n\\n    function getApproved(uint256 tokenId) public view virtual override(ERC721, IERC721) blockIfChangingToken(tokenId) returns (address) {\\n        return super.getApproved(tokenId);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual override(ERC721, IERC721) blockIfChangingAddress {\\n        super.setApprovalForAll(operator, approved);\\n    }\\n\\n    function isApprovedForAll(address owner, address operator) public view virtual override(ERC721, IERC721) blockIfChangingAddress returns (bool) {\\n        return super.isApprovedForAll(owner, operator);\\n    }\\n    \\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override(ERC721, IERC721) blockIfChangingToken(tokenId) {\\n        super.safeTransferFrom(from, to, tokenId);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override(ERC721, IERC721) blockIfChangingToken(tokenId) {\\n        super.safeTransferFrom(from, to, tokenId, _data);\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address from,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n      return IERC721Receiver.onERC721Received.selector;\\n    }    \\n\\n}\",\"keccak256\":\"0x88aa0a868e42c72dc71bb0dceadc02d11d697bb845e4fb254034fe4e1aa47fda\",\"license\":\"MIT LICENSE\"},\"contracts/interfaces/IFounderPass.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IFounderPass is IERC721{\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n}\",\"keccak256\":\"0x3c34d679d5d3af0ee2b2ae6bd7ede173177e60971d37f17b4b66833fa5ca72ce\",\"license\":\"MIT LICENSE\"},\"contracts/interfaces/IMnA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IMnA is IERC721Enumerable {\\n\\n    // game data storage\\n    struct MarineAlien {\\n        bool isMarine;\\n        uint8 M_Weapon;\\n        uint8 M_Back;\\n        uint8 M_Headgear;\\n        uint8 M_Eyes;\\n        uint8 M_Emblem;\\n        uint8 M_Body;\\n        uint8 A_Headgear;\\n        uint8 A_Eye;\\n        uint8 A_Back;\\n        uint8 A_Mouth;\\n        uint8 A_Body;\\n        uint8 rankIndex;\\n    }\\n\\n    function minted() external returns (uint16);\\n    function updateOriginAccess(uint16[] memory tokenIds) external;\\n    function mint(address recipient, uint256 seed) external;\\n    function burn(uint256 tokenId) external;\\n    function getMaxTokens() external view returns (uint256);\\n    function getPaidTokens() external view returns (uint256);\\n    function getTokenTraits(uint256 tokenId) external view returns (MarineAlien memory);\\n    function getTokenWriteBlock(uint256 tokenId) external view returns(uint64);\\n    function isMarine(uint256 tokenId) external view returns(bool);\\n  \\n}\",\"keccak256\":\"0x61b399d83c8c8464f1b5d391fe92cef9d5979c8b0ed9cfc7960119026b1dc52d\",\"license\":\"MIT LICENSE\"},\"contracts/interfaces/IRandomSeedGenerator.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface IRandomSeedGenerator {\\n    function random() external returns (uint256);\\n}\",\"keccak256\":\"0xbb65f1b1660a5b3a0a0206418afa04e609c9fa3a85d62941cbd79cbb0a330d6a\"},\"contracts/interfaces/IStakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE \\n\\npragma solidity ^0.8.0;\\n\\ninterface IStakingPool {\\n  function addManyToMarinePoolAndAlienPool(address account, uint16[] calldata tokenIds) external;\\n  function randomAlienOwner(uint256 seed) external view returns (address);\\n}\",\"keccak256\":\"0x220fe044bf4be7de6bc5f2000a30cec2f3b92d5c84a4f8a461eec2809e1d0351\",\"license\":\"MIT LICENSE\"},\"contracts/interfaces/ITraits.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE \\n\\npragma solidity ^0.8.0;\\n\\ninterface ITraits {\\n  function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\",\"keccak256\":\"0x5cc816abe59a704ec2a887d644aa058a5f95aa2738c9ca8b3f775cba8201f24a\",\"license\":\"MIT LICENSE\"},\"contracts/libraries/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at 0 (e.g. 1, 2, 3..).\\n *\\n * Does not support burning tokens to address(0).\\n */\\ncontract ERC721A is\\n  Context,\\n  ERC165,\\n  IERC721,\\n  IERC721Metadata,\\n  IERC721Enumerable\\n{\\n  using Address for address;\\n  using Strings for uint256;\\n\\n  struct TokenOwnership {\\n    address addr;\\n    uint64 startTimestamp;\\n  }\\n\\n  struct AddressData {\\n    uint128 balance;\\n    uint128 numberMinted;\\n  }\\n\\n  uint256 private currentIndex = 1;\\n\\n  uint256 internal immutable maxBatchSize;\\n\\n  // Token name\\n  string private _name;\\n\\n  // Token symbol\\n  string private _symbol;\\n\\n  // Mapping from token ID to ownership details\\n  // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\n  mapping(uint256 => TokenOwnership) private _ownerships;\\n\\n  // Mapping owner address to address data\\n  mapping(address => AddressData) private _addressData;\\n\\n  // Mapping from token ID to approved address\\n  mapping(uint256 => address) private _tokenApprovals;\\n\\n  // Mapping from owner to operator approvals\\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n  /**\\n   * @dev\\n   * `maxBatchSize` refers to how much a minter can mint at a time.\\n   */\\n  constructor(\\n    string memory name_,\\n    string memory symbol_,\\n    uint256 maxBatchSize_\\n  ) {\\n    require(maxBatchSize_ > 0, \\\"ERC721A: max batch size must be nonzero\\\");\\n    _name = name_;\\n    _symbol = symbol_;\\n    maxBatchSize = maxBatchSize_;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Enumerable-totalSupply}.\\n   */\\n  function totalSupply() public view override returns (uint256) {\\n    return currentIndex;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Enumerable-tokenByIndex}.\\n   */\\n  function tokenByIndex(uint256 index) public view override returns (uint256) {\\n    require(index < totalSupply(), \\\"ERC721A: global index out of bounds\\\");\\n    return index;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n   * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\\n   * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\\n   */\\n  function tokenOfOwnerByIndex(address owner, uint256 index)\\n    public\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    require(index < balanceOf(owner), \\\"ERC721A: owner index out of bounds\\\");\\n    uint256 numMintedSoFar = totalSupply();\\n    uint256 tokenIdsIdx = 0;\\n    address currOwnershipAddr = address(0);\\n    for (uint256 i = 0; i < numMintedSoFar; i++) {\\n      TokenOwnership memory ownership = _ownerships[i];\\n      if (ownership.addr != address(0)) {\\n        currOwnershipAddr = ownership.addr;\\n      }\\n      if (currOwnershipAddr == owner) {\\n        if (tokenIdsIdx == index) {\\n          return i;\\n        }\\n        tokenIdsIdx++;\\n      }\\n    }\\n    revert(\\\"ERC721A: unable to get token of owner by index\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(ERC165, IERC165)\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IERC721).interfaceId ||\\n      interfaceId == type(IERC721Metadata).interfaceId ||\\n      interfaceId == type(IERC721Enumerable).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-balanceOf}.\\n   */\\n  function balanceOf(address owner) public view override returns (uint256) {\\n    require(owner != address(0), \\\"ERC721A: balance query for the zero address\\\");\\n    return uint256(_addressData[owner].balance);\\n  }\\n\\n  function _numberMinted(address owner) internal view returns (uint256) {\\n    require(\\n      owner != address(0),\\n      \\\"ERC721A: number minted query for the zero address\\\"\\n    );\\n    return uint256(_addressData[owner].numberMinted);\\n  }\\n\\n  function ownershipOf(uint256 tokenId)\\n    internal\\n    view\\n    returns (TokenOwnership memory)\\n  {\\n    require(_exists(tokenId), \\\"ERC721A: owner query for nonexistent token\\\");\\n\\n    uint256 lowestTokenToCheck;\\n    if (tokenId >= maxBatchSize) {\\n      lowestTokenToCheck = tokenId - maxBatchSize + 1;\\n    }\\n\\n    for (uint256 curr = tokenId; curr >= lowestTokenToCheck; curr--) {\\n      TokenOwnership memory ownership = _ownerships[curr];\\n      if (ownership.addr != address(0)) {\\n        return ownership;\\n      }\\n    }\\n\\n    revert(\\\"ERC721A: unable to determine the owner of token\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC721-ownerOf}.\\n   */\\n  function ownerOf(uint256 tokenId) public view override returns (address) {\\n    return ownershipOf(tokenId).addr;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-name}.\\n   */\\n  function name() public view virtual override returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-symbol}.\\n   */\\n  function symbol() public view virtual override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-tokenURI}.\\n   */\\n  function tokenURI(uint256 tokenId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (string memory)\\n  {\\n    require(\\n      _exists(tokenId),\\n      \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n    );\\n\\n    string memory baseURI = _baseURI();\\n    return\\n      bytes(baseURI).length > 0\\n        ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n        : \\\"\\\";\\n  }\\n\\n  /**\\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n   * by default, can be overriden in child contracts.\\n   */\\n  function _baseURI() internal view virtual returns (string memory) {\\n    return \\\"\\\";\\n  }\\n\\n  /**\\n   * @dev See {IERC721-approve}.\\n   */\\n  function approve(address to, uint256 tokenId) public override {\\n    address owner = ERC721A.ownerOf(tokenId);\\n    require(to != owner, \\\"ERC721A: approval to current owner\\\");\\n\\n    require(\\n      _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n      \\\"ERC721A: approve caller is not owner nor approved for all\\\"\\n    );\\n\\n    _approve(to, tokenId, owner);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-getApproved}.\\n   */\\n  function getApproved(uint256 tokenId) public view override returns (address) {\\n    require(_exists(tokenId), \\\"ERC721A: approved query for nonexistent token\\\");\\n\\n    return _tokenApprovals[tokenId];\\n  }\\n\\n  /**\\n   * @dev See {IERC721-setApprovalForAll}.\\n   */\\n  function setApprovalForAll(address operator, bool approved) public override {\\n    require(operator != _msgSender(), \\\"ERC721A: approve to caller\\\");\\n\\n    _operatorApprovals[_msgSender()][operator] = approved;\\n    emit ApprovalForAll(_msgSender(), operator, approved);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-isApprovedForAll}.\\n   */\\n  function isApprovedForAll(address owner, address operator)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return _operatorApprovals[owner][operator];\\n  }\\n\\n  /**\\n   * @dev See {IERC721-transferFrom}.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public override {\\n    _transfer(from, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public override {\\n    safeTransferFrom(from, to, tokenId, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC721-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  ) public override {\\n    _transfer(from, to, tokenId);\\n    require(\\n      _checkOnERC721Received(from, to, tokenId, _data),\\n      \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev Returns whether `tokenId` exists.\\n   *\\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n   *\\n   * Tokens start existing when they are minted (`_mint`),\\n   */\\n  function _exists(uint256 tokenId) internal view returns (bool) {\\n    return tokenId < currentIndex;\\n  }\\n\\n  function _safeMint(address to, uint256 quantity) internal {\\n    _safeMint(to, quantity, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Mints `quantity` tokens and transfers them to `to`.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - `quantity` cannot be larger than the max batch size.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _safeMint(\\n    address to,\\n    uint256 quantity,\\n    bytes memory _data\\n  ) internal {\\n    uint256 startTokenId = currentIndex;\\n    require(to != address(0), \\\"ERC721A: mint to the zero address\\\");\\n    // We know if the first token in the batch doesn't exist, the other ones don't as well, because of serial ordering.\\n    require(!_exists(startTokenId), \\\"ERC721A: token already minted\\\");\\n    require(quantity <= maxBatchSize, \\\"ERC721A: quantity to mint too high\\\");\\n\\n    _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n    AddressData memory addressData = _addressData[to];\\n    _addressData[to] = AddressData(\\n      addressData.balance + uint128(quantity),\\n      addressData.numberMinted + uint128(quantity)\\n    );\\n    _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));\\n\\n    uint256 updatedIndex = startTokenId;\\n\\n    for (uint256 i = 0; i < quantity; i++) {\\n      emit Transfer(address(0), to, updatedIndex);\\n      require(\\n        _checkOnERC721Received(address(0), to, updatedIndex, _data),\\n        \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\n      );\\n      updatedIndex++;\\n    }\\n\\n    currentIndex = updatedIndex;\\n    _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n  }\\n\\n  /**\\n   * @dev Transfers `tokenId` from `from` to `to`.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must be owned by `from`.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) private {\\n    TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\n\\n    bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\\n      getApproved(tokenId) == _msgSender() ||\\n      isApprovedForAll(prevOwnership.addr, _msgSender()));\\n\\n    require(\\n      isApprovedOrOwner,\\n      \\\"ERC721A: transfer caller is not owner nor approved\\\"\\n    );\\n\\n    require(\\n      prevOwnership.addr == from,\\n      \\\"ERC721A: transfer from incorrect owner\\\"\\n    );\\n    require(to != address(0), \\\"ERC721A: transfer to the zero address\\\");\\n\\n    _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n    // Clear approvals from the previous owner\\n    _approve(address(0), tokenId, prevOwnership.addr);\\n\\n    _addressData[from].balance -= 1;\\n    _addressData[to].balance += 1;\\n    _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));\\n\\n    // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n    // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n    uint256 nextTokenId = tokenId + 1;\\n    if (_ownerships[nextTokenId].addr == address(0)) {\\n      if (_exists(nextTokenId)) {\\n        _ownerships[nextTokenId] = TokenOwnership(\\n          prevOwnership.addr,\\n          prevOwnership.startTimestamp\\n        );\\n      }\\n    }\\n\\n    emit Transfer(from, to, tokenId);\\n    _afterTokenTransfers(from, to, tokenId, 1);\\n  }\\n\\n  /**\\n   * @dev Approve `to` to operate on `tokenId`\\n   *\\n   * Emits a {Approval} event.\\n   */\\n  function _approve(\\n    address to,\\n    uint256 tokenId,\\n    address owner\\n  ) private {\\n    _tokenApprovals[tokenId] = to;\\n    emit Approval(owner, to, tokenId);\\n  }\\n\\n  uint256 public nextOwnerToExplicitlySet = 0;\\n\\n  /**\\n   * @dev Explicitly set `owners` to eliminate loops in future calls of ownerOf().\\n   */\\n  function _setOwnersExplicit(uint256 quantity) internal {\\n    uint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;\\n    require(quantity > 0, \\\"quantity must be nonzero\\\");\\n    uint256 endIndex = oldNextOwnerToSet + quantity - 1;\\n    if (endIndex > currentIndex - 1) {\\n      endIndex = currentIndex - 1;\\n    }\\n    // We know if the last one in the group exists, all in the group exist, due to serial ordering.\\n    require(_exists(endIndex), \\\"not enough minted yet for this cleanup\\\");\\n    for (uint256 i = oldNextOwnerToSet; i <= endIndex; i++) {\\n      if (_ownerships[i].addr == address(0)) {\\n        TokenOwnership memory ownership = ownershipOf(i);\\n        _ownerships[i] = TokenOwnership(\\n          ownership.addr,\\n          ownership.startTimestamp\\n        );\\n      }\\n    }\\n    nextOwnerToExplicitlySet = endIndex + 1;\\n  }\\n\\n  /**\\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n   * The call is not executed if the target address is not a contract.\\n   *\\n   * @param from address representing the previous owner of the given token ID\\n   * @param to target address that will receive the tokens\\n   * @param tokenId uint256 ID of the token to be transferred\\n   * @param _data bytes optional data to send along with the call\\n   * @return bool whether the call correctly returned the expected magic value\\n   */\\n  function _checkOnERC721Received(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  ) private returns (bool) {\\n    if (to.isContract()) {\\n      try\\n        IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\\n      returns (bytes4 retval) {\\n        return retval == IERC721Receiver(to).onERC721Received.selector;\\n      } catch (bytes memory reason) {\\n        if (reason.length == 0) {\\n          revert(\\\"ERC721A: transfer to non ERC721Receiver implementer\\\");\\n        } else {\\n          assembly {\\n            revert(add(32, reason), mload(reason))\\n          }\\n        }\\n      }\\n    } else {\\n      return true;\\n    }\\n  }\\n\\n  /**\\n   * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n   *\\n   * startTokenId - the first token id to be transferred\\n   * quantity - the amount to be transferred\\n   *\\n   * Calling conditions:\\n   *\\n   * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n   * transferred to `to`.\\n   * - When `from` is zero, `tokenId` will be minted for `to`.\\n   */\\n  function _beforeTokenTransfers(\\n    address from,\\n    address to,\\n    uint256 startTokenId,\\n    uint256 quantity\\n  ) internal virtual {}\\n\\n  /**\\n   * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n   * minting.\\n   *\\n   * startTokenId - the first token id to be transferred\\n   * quantity - the amount to be transferred\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero.\\n   * - `from` and `to` are never both zero.\\n   */\\n  function _afterTokenTransfers(\\n    address from,\\n    address to,\\n    uint256 startTokenId,\\n    uint256 quantity\\n  ) internal virtual {}\\n}\",\"keccak256\":\"0x8dd50ad302b6d2b34e97973cfcf4a497c247d8bb287fc82e46a7f7ea8daf11da\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102f15760003560e01c80634f986b331161019d578063a5e4ee8c116100e9578063ca49d247116100a2578063e985e9c51161007c578063e985e9c5146106a0578063ebd17368146106b3578063f2fde38b146106de578063fd6b86e5146106f1576102f1565b8063ca49d24714610671578063e1fc334f14610684578063e831574214610697576102f1565b8063a5e4ee8c14610613578063b3066d4914610626578063b88d4fde14610639578063c084f5401461064c578063c08a192d14610655578063c87b56dd1461065e576102f1565b8063715018a61161015657806394e568471161013057806394e56847146105b857806395d89b41146105d8578063a1b8f374146105e0578063a22cb46514610600576102f1565b8063715018a61461058c57806377251f86146105945780638da5cb5b146105a7576102f1565b80634f986b33146105255780635c975abb146105385780636352211e1461054b5780636abcded11461055e578063704802751461056657806370a0823114610579576102f1565b806333df4b2c1161025c57806340c10f1911610215578063453e8149116101ef578063453e8149146104e15780634e71d92d146104e95780634f02c420146104f15780634f6ccce714610512576102f1565b806340c10f19146104a857806342842e0e146104bb57806342966c68146104ce576102f1565b806333df4b2c1461042f5780633431a7531461045457806335ca838b14610467578063368383911461047a5780634018b1f81461048d5780634019bfc714610495576102f1565b806316c38b3c116102ae57806316c38b3c146103be5780631785f53c146103d157806318160ddd146103e457806323b872dd146103f65780632f745c59146104095780632f97b0591461041c576102f1565b806301ffc9a7146102f657806306fdde031461031e578063081812fc14610333578063095ea7b31461035e5780630c56ae3b14610373578063150b7a0214610386575b600080fd5b610309610304366004613d24565b610704565b60405190151581526020015b60405180910390f35b610326610731565b6040516103159190613f56565b610346610341366004613dce565b6107c3565b6040516001600160a01b039091168152602001610315565b61037161036c366004613c27565b610838565b005b602b54610346906001600160a01b031681565b6103a5610394366004613ab4565b630a85bd0160e11b95945050505050565b6040516001600160e01b03199091168152602001610315565b6103716103cc366004613d0a565b6108a1565b6103716103df3660046139ba565b610963565b6008545b604051908152602001610315565b610371610404366004613a74565b6109ae565b6103e8610417366004613c27565b610a57565b61037161042a366004613c27565b610b82565b61044261043d366004613dfe565b610e21565b60405160ff9091168152602001610315565b610371610462366004613dce565b610e67565b610371610475366004613c52565b610e9a565b610442610488366004613dfe565b610ffb565b600c546103e8565b6103096104a3366004613dce565b61100b565b6103716104b6366004613c27565b611149565b6103716104c9366004613a74565b61135c565b6103716104dc366004613dce565b6113c1565b6103716114fc565b610371611786565b600e546104ff9061ffff1681565b60405161ffff9091168152602001610315565b6103e8610520366004613dce565b6119f0565b602d54610346906001600160a01b031681565b610309600a54600160a01b900460ff1690565b610346610559366004613dce565b611a57565b600b546103e8565b6103716105743660046139ba565b611b7a565b6103e86105873660046139ba565b611bc8565b610371611c8c565b6103716105a2366004613d0a565b611cc2565b600a546001600160a01b0316610346565b6105cb6105c6366004613dce565b611d08565b60405161031591906140cd565b610326611ea6565b6103e86105ee366004613dce565b60106020526000908152604090205481565b61037161060e366004613bf3565b611eb5565b600e546103099062010000900460ff1681565b610371610634366004613a2a565b611f18565b610371610647366004613b4d565b611f81565b6103e8600c5481565b6103e8600d5481565b61032661066c366004613dce565b611fee565b602e54610346906001600160a01b031681565b602c54610346906001600160a01b031681565b6103e8600b5481565b6103096106ae3660046139f2565b612188565b6106c66106c1366004613dce565b61220f565b6040516001600160401b039091168152602001610315565b6103716106ec3660046139ba565b612261565b6103716106ff366004613dce565b6122f9565b60006001600160e01b0319821663780e9d6360e01b1480610729575061072982612328565b90505b919050565b60606000805461074090614290565b80601f016020809104026020016040519081016040528092919081815260200182805461076c90614290565b80156107b95780601f1061078e576101008083540402835291602001916107b9565b820191906000526020600020905b81548152906001019060200180831161079c57829003601f168201915b5050505050905090565b336000908152602f6020526040812054829060ff1680610801575060008181526012602052604090205443600160401b9091046001600160401b0316105b6108265760405162461bcd60e51b815260040161081d90613ff2565b60405180910390fd5b61082f83612378565b91505b50919050565b336000908152602f6020526040902054819060ff1680610876575060008181526012602052604090205443600160401b9091046001600160401b0316105b6108925760405162461bcd60e51b815260040161081d90613ff2565b61089c838361240d565b505050565b602c546001600160a01b0316158015906108c55750602b546001600160a01b031615155b80156108db5750602d546001600160a01b031615155b61091b5760405162461bcd60e51b815260206004820152601160248201527010dbdb9d1c9858dd1cc81b9bdd081cd95d607a1b604482015260640161081d565b600a546001600160a01b031633146109455760405162461bcd60e51b815260040161081d90614047565b80156109585761095361251e565b610960565b6109606125a6565b50565b600a546001600160a01b0316331461098d5760405162461bcd60e51b815260040161081d90614047565b6001600160a01b03166000908152602f60205260409020805460ff19169055565b336000908152602f6020526040902054819060ff16806109ec575060008181526012602052604090205443600160401b9091046001600160401b0316105b610a085760405162461bcd60e51b815260040161081d90613ff2565b336000908152602f602052604090205460ff16610a4657610a2a335b83612630565b610a465760405162461bcd60e51b815260040161081d9061407c565b610a51848484612707565b50505050565b336000908152602f602052604081205460ff1680610a9457503260009081526011602052604090205443600160401b9091046001600160401b0316105b610ab05760405162461bcd60e51b815260040161081d90613ff2565b336000908152602f602052604090205460ff1680610af657506001600160a01b03831660009081526011602052604090205443600160401b9091046001600160401b0316105b610b125760405162461bcd60e51b815260040161081d90613ff2565b6000610b1e84846128b2565b336000908152602f602052604090205490915060ff1680610b5d575060008181526012602052604090205443600160401b9091046001600160401b0316105b610b795760405162461bcd60e51b815260040161081d90613ff2565b90505b92915050565b600a546001600160a01b03163314610bac5760405162461bcd60e51b815260040161081d90614047565b610bbf600a54600160a01b900460ff1690565b15610bdc5760405162461bcd60e51b815260040161081d9061401d565b600e5462010000900460ff1615610c435760405162461bcd60e51b815260206004820152602560248201527f43616e2077697468647261772061667465722061697264726f7020737461676560448201526420656e647360d81b606482015260840161081d565b6040516370a0823160e01b815230600482018190526000916370a082319060240160206040518083038186803b158015610c7c57600080fd5b505afa158015610c90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb49190613de6565b905060008111610cfc5760405162461bcd60e51b81526020600482015260136024820152724e6f7468696e6720746f20776974686472617760681b604482015260640161081d565b6040516331a9108f60e11b81526004810183905230908190636352211e9060240160206040518083038186803b158015610d3557600080fd5b505afa158015610d49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6d91906139d6565b6001600160a01b031614610db55760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081d1bdad95b9259608a1b604482015260640161081d565b604051632142170760e11b815230600482018190526001600160a01b038516602483015260448201849052906342842e0e90606401600060405180830381600087803b158015610e0457600080fd5b505af1158015610e18573d6000803e3d6000fd5b50505050505050565b601382600c8110610e3157600080fd5b018181548110610e4057600080fd5b9060005260206000209060209182820401919006915091509054906101000a900460ff1681565b600a546001600160a01b03163314610e915760405162461bcd60e51b815260040161081d90614047565b61ffff16600c55565b336000908152602f602052604090205460ff16610ec95760405162461bcd60e51b815260040161081d90613fbb565b604080518082018252426001600160401b038181168352438082166020808601918252326000908152601190915295862094518554915167ffffffffffffffff199092169084161767ffffffffffffffff60401b1916600160401b91909316029190911790925590915b8351811015610a51576040518060400160405280836001600160401b03168152602001846001600160401b031681525060126000868481518110610f8757634e487b7160e01b600052603260045260246000fd5b60209081029190910181015161ffff168252818101929092526040016000208251815493909201516001600160401b03908116600160401b0267ffffffffffffffff60401b199190931667ffffffffffffffff19909416939093179290921617905580610ff3816142e7565b915050610f33565b601f82600c8110610e3157600080fd5b336000908152602f6020526040812054829060ff1680611049575060008181526012602052604090205443600160401b9091046001600160401b0316105b6110655760405162461bcd60e51b815260040161081d90613ff2565b50506000908152600f602090815260409182902082516101a081018452905460ff80821615158084526101008084048316958501959095526201000083048216958401959095526301000000820481166060840152640100000000820481166080840152650100000000008204811660a084015266010000000000008204811660c0840152600160381b8204811660e0840152600160401b8204811693830193909352600160481b81048316610120830152600160501b81048316610140830152600160581b81048316610160830152600160601b90049091166101809091015290565b61115c600a54600160a01b900460ff1690565b156111795760405162461bcd60e51b815260040161081d9061401d565b336000908152602f602052604090205460ff166111a85760405162461bcd60e51b815260040161081d90613fbb565b600b54600e546111bd9061ffff16600161420f565b61ffff1611156112035760405162461bcd60e51b8152602060048201526011602482015270105b1b081d1bdad95b9cc81b5a5b9d1959607a1b604482015260640161081d565b600e805461ffff16906000611217836142c5565b82546101009290920a61ffff818102199093169183160217909155600e54326000908152601160209081526040918290208251808401909352546001600160401b038082168452600160401b909104169082015261127a93509116908390612948565b50326001600160a01b038316148015906112a25750602b546001600160a01b03838116911614155b80156112b757506001600160a01b0382163014155b1561134657600e5461ffff166000908152600f602052604090205460ff161561131257600e5460405161ffff909116907fcf32c81b2c202b1b54ee14fa8a20c4707725e3d03d581a6e513a29d6cf4c511a90600090a2611346565b600e5460405161ffff909116907f6ea12d397b099d5fc983cd4d42866130c2134d023c87255a52c150c328c20e2090600090a25b600e5461135890839061ffff16612c91565b5050565b336000908152602f6020526040902054819060ff168061139a575060008181526012602052604090205443600160401b9091046001600160401b0316105b6113b65760405162461bcd60e51b815260040161081d90613ff2565b610a51848484612cab565b6113d4600a54600160a01b900460ff1690565b156113f15760405162461bcd60e51b815260040161081d9061401d565b336000908152602f602052604090205460ff166114205760405162461bcd60e51b815260040161081d90613fbb565b3261142a82611a57565b6001600160a01b0316146114805760405162461bcd60e51b815260206004820152601760248201527f4f6f707320796f7520646f6e2774206f776e2074686174000000000000000000604482015260640161081d565b6000818152600f602052604090205460ff16156114c75760405181907f86f8109fc1014c667ee2be6fb0b2b1d54dc3677ab2235dd38d9ea7d6419ff73890600090a26114f3565b60405181907f53a25ae4217fbc3bc27383ae359a946f20812eb9b2cb7c25142d40c433acb65890600090a25b61096081612cc6565b600a546001600160a01b031633146115265760405162461bcd60e51b815260040161081d90614047565b611539600a54600160a01b900460ff1690565b156115565760405162461bcd60e51b815260040161081d9061401d565b600e5462010000900460ff166115c95760405162461bcd60e51b815260206004820152603260248201527f41697264726f70206d696e74696e67206973206f6e6c7920617661696c61626c6044820152716520696e2061697264726f7020737461676560701b606482015260840161081d565b600e54600c5461ffff909116106116225760405162461bcd60e51b815260206004820152601960248201527f41697264726f70206d696e74696e6720636f6d706c6574656400000000000000604482015260640161081d565b602d546001600160a01b031661167a5760405162461bcd60e51b815260206004820152601d60248201527f72616e646f6d20736565642067656e657261746f72206973206e756c6c000000604482015260640161081d565b600d54600e5461168f90829061ffff16614235565b600c5410156116af57600e54600c546116ac9161ffff169061424d565b90505b60005b8181101561135857602d5460408051635ec01e4d60e01b815290516000926001600160a01b031691635ec01e4d91600480830192602092919082900301818787803b15801561170057600080fd5b505af1158015611714573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117389190613de6565b600e546040805160208082019490945261ffff9092168282015280518083038201815260609092019052805191012090506117733082611149565b508061177e816142e7565b9150506116b2565b611799600a54600160a01b900460ff1690565b156117b65760405162461bcd60e51b815260040161081d9061401d565b602e546040516370a0823160e01b81523360048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156117fa57600080fd5b505afa15801561180e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118329190613de6565b905060005b8181101561135857602e54604051632f745c5960e01b8152336004820152602481018390526000916001600160a01b031690632f745c599060440160206040518083038186803b15801561188a57600080fd5b505afa15801561189e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c29190613de6565b6040516331a9108f60e11b81526004810182905290915030908190636352211e9060240160206040518083038186803b1580156118fe57600080fd5b505afa158015611912573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193691906139d6565b6001600160a01b03161461197e5760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081d1bdad95b9259608a1b604482015260640161081d565b604051632142170760e11b8152306004820181905233602483015260448201839052906342842e0e90606401600060405180830381600087803b1580156119c457600080fd5b505af11580156119d8573d6000803e3d6000fd5b505050505080806119e8906142e7565b915050611837565b6000806119fc83612d6d565b336000908152602f602052604090205490915060ff1680611a3b575060008181526012602052604090205443600160401b9091046001600160401b0316105b6107295760405162461bcd60e51b815260040161081d90613ff2565b336000908152602f602052604081205460ff1680611a9457503260009081526011602052604090205443600160401b9091046001600160401b0316105b611ab05760405162461bcd60e51b815260040161081d90613ff2565b336000908152602f6020526040902054829060ff1680611aee575060008181526012602052604090205443600160401b9091046001600160401b0316105b611b0a5760405162461bcd60e51b815260040161081d90613ff2565b6000611b1584612e0e565b336000908152602f602052604090205490915060ff1680611b5e57506001600160a01b03811660009081526011602052604090205443600160401b9091046001600160401b0316105b61082f5760405162461bcd60e51b815260040161081d90613ff2565b600a546001600160a01b03163314611ba45760405162461bcd60e51b815260040161081d90614047565b6001600160a01b03166000908152602f60205260409020805460ff19166001179055565b336000908152602f602052604081205460ff1680611c0557503260009081526011602052604090205443600160401b9091046001600160401b0316105b611c215760405162461bcd60e51b815260040161081d90613ff2565b336000908152602f602052604090205460ff1680611c6757506001600160a01b03821660009081526011602052604090205443600160401b9091046001600160401b0316105b611c835760405162461bcd60e51b815260040161081d90613ff2565b61072982612e85565b600a546001600160a01b03163314611cb65760405162461bcd60e51b815260040161081d90614047565b611cc06000612f0c565b565b600a546001600160a01b03163314611cec5760405162461bcd60e51b815260040161081d90614047565b600e8054911515620100000262ff000019909216919091179055565b611d1061393e565b336000908152602f602052604090205460ff1680611d4d57503260009081526011602052604090205443600160401b9091046001600160401b0316105b611d695760405162461bcd60e51b815260040161081d90613ff2565b336000908152602f6020526040902054829060ff1680611da7575060008181526012602052604090205443600160401b9091046001600160401b0316105b611dc35760405162461bcd60e51b815260040161081d90613ff2565b50506000908152600f602090815260409182902082516101a081018452905460ff808216151583526101008083048216948401949094526201000082048116948301949094526301000000810484166060830152640100000000810484166080830152650100000000008104841660a083015266010000000000008104841660c0830152600160381b8104841660e0830152600160401b8104841692820192909252600160481b82048316610120820152600160501b82048316610140820152600160581b82048316610160820152600160601b90910490911661018082015290565b60606001805461074090614290565b336000908152602f602052604090205460ff1680611ef257503260009081526011602052604090205443600160401b9091046001600160401b0316105b611f0e5760405162461bcd60e51b815260040161081d90613ff2565b6113588282612f5e565b600a546001600160a01b03163314611f425760405162461bcd60e51b815260040161081d90614047565b602c80546001600160a01b039485166001600160a01b031991821617909155602b805493851693821693909317909255602d8054919093169116179055565b336000908152602f6020526040902054829060ff1680611fbf575060008181526012602052604090205443600160401b9091046001600160401b0316105b611fdb5760405162461bcd60e51b815260040161081d90613ff2565b611fe785858585612f69565b5050505050565b336000908152602f602052604090205460609060ff168061202e57503260009081526011602052604090205443600160401b9091046001600160401b0316105b61204a5760405162461bcd60e51b815260040161081d90613ff2565b336000908152602f6020526040902054829060ff1680612088575060008181526012602052604090205443600160401b9091046001600160401b0316105b6120a45760405162461bcd60e51b815260040161081d90613ff2565b6000838152600260205260409020546001600160a01b03166121085760405162461bcd60e51b815260206004820152601760248201527f546f6b656e20494420646f6573206e6f74206578697374000000000000000000604482015260640161081d565b602c5460405163c87b56dd60e01b8152600481018590526001600160a01b039091169063c87b56dd9060240160006040518083038186803b15801561214c57600080fd5b505afa158015612160573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261082f9190810190613d5c565b336000908152602f602052604081205460ff16806121c557503260009081526011602052604090205443600160401b9091046001600160401b0316105b6121e15760405162461bcd60e51b815260040161081d90613ff2565b6001600160a01b0380841660009081526005602090815260408083209386168352929052205460ff16610b79565b336000908152602f602052604081205460ff1661223e5760405162461bcd60e51b815260040161081d90613fbb565b50600090815260126020526040902054600160401b90046001600160401b031690565b600a546001600160a01b0316331461228b5760405162461bcd60e51b815260040161081d90614047565b6001600160a01b0381166122f05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161081d565b61096081612f0c565b600a546001600160a01b031633146123235760405162461bcd60e51b815260040161081d90614047565b600d55565b60006001600160e01b031982166380ac58cd60e01b148061235957506001600160e01b03198216635b5e139f60e01b145b8061072957506301ffc9a760e01b6001600160e01b0319831614610729565b6000818152600260205260408120546001600160a01b03166123f15760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161081d565b506000908152600460205260409020546001600160a01b031690565b600061241882612e0e565b9050806001600160a01b0316836001600160a01b031614156124865760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161081d565b336001600160a01b03821614806124a257506124a281336106ae565b6125145760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161081d565b61089c8383612f9a565b612531600a54600160a01b900460ff1690565b1561254e5760405162461bcd60e51b815260040161081d9061401d565b600a805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586125893390565b6040516001600160a01b03909116815260200160405180910390a1565b6125b9600a54600160a01b900460ff1690565b6125fc5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161081d565b600a805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33612589565b6000818152600260205260408120546001600160a01b03166126a95760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161081d565b60006126b483612e0e565b9050806001600160a01b0316846001600160a01b031614806126ef5750836001600160a01b03166126e4846107c3565b6001600160a01b0316145b806126ff57506126ff8185612188565b949350505050565b826001600160a01b031661271a82612e0e565b6001600160a01b0316146127825760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161081d565b6001600160a01b0382166127e45760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161081d565b6127ef838383613008565b6127fa600082612f9a565b6001600160a01b038316600090815260036020526040812080546001929061282390849061424d565b90915550506001600160a01b0382166000908152600360205260408120805460019290612851908490614235565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60006128bd83612e85565b821061291f5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b606482015260840161081d565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b61295061393e565b612959836130c5565b9050601060006129688361325c565b81526020019081526020016000205460001415612bce5780600f600086815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360ff16021790555060608201518160000160036101000a81548160ff021916908360ff16021790555060808201518160000160046101000a81548160ff021916908360ff16021790555060a08201518160000160056101000a81548160ff021916908360ff16021790555060c08201518160000160066101000a81548160ff021916908360ff16021790555060e08201518160000160076101000a81548160ff021916908360ff1602179055506101008201518160000160086101000a81548160ff021916908360ff1602179055506101208201518160000160096101000a81548160ff021916908360ff16021790555061014082015181600001600a6101000a81548160ff021916908360ff16021790555061016082015181600001600b6101000a81548160ff021916908360ff16021790555061018082015181600001600c6101000a81548160ff021916908360ff1602179055509050508360106000612b558461325c565b8152602081019190915260400160002055805115612b9d5760405184907fe0fa44a304932c545206473a933ecea615b522baa4188ca656811fa23eeebefc90600090a2612bc9565b60405184907f3fd269bac8ce5679c129fb62f42855a1e0d2cdeab71acb5cc81000726bb36bc990600090a25b612c8a565b602d5460408051635ec01e4d60e01b815290516000926001600160a01b031691635ec01e4d91600480830192602092919082900301818787803b158015612c1457600080fd5b505af1158015612c28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4c9190613de6565b60408051602081019290925281018590526060016040516020818303038152906040528051906020012060001c9050612c86858285612948565b9150505b9392505050565b6113588282604051806020016040528060008152506132d2565b61089c83838360405180602001604052806000815250611f81565b6000612cd182612e0e565b9050612cdf81600084613008565b612cea600083612f9a565b6001600160a01b0381166000908152600360205260408120805460019290612d1390849061424d565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000612d7860085490565b8210612ddb5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b606482015260840161081d565b60088281548110612dfc57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b0316806107295760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161081d565b60006001600160a01b038216612ef05760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161081d565b506001600160a01b031660009081526003602052604090205490565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611358338383613305565b612f7233610a24565b612f8e5760405162461bcd60e51b815260040161081d9061407c565b610a51848484846133d4565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612fcf82612e0e565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6001600160a01b0383166130635761305e81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b613086565b816001600160a01b0316836001600160a01b031614613086576130868382613407565b6001600160a01b0382166130a25761309d816134a4565b61089c565b826001600160a01b0316826001600160a01b03161461089c5761089c828261357d565b6130cd61393e565b6130dc600a61ffff8416614302565b158015825261319e57601082901c91506130fb8261ffff1660006135c1565b60ff16602082015260109190911c9061311961ffff831660016135c1565b60ff16604082015260109190911c9061313761ffff831660026135c1565b60ff16606082015260109190911c9061315561ffff831660036135c1565b60ff16608082015260109190911c9061317361ffff831660046135c1565b60ff1660a082015260109190911c9061319161ffff831660056135c1565b60ff1660c082015261072c565b601082901c91506131b48261ffff1660066135c1565b60ff1660e082015260109190911c906131d261ffff831660076135c1565b60ff1661010082015260109190911c906131f161ffff831660086135c1565b60ff1661012082015260109190911c9061321061ffff831660096135c1565b60ff1661014082015260109190911c9061322f61ffff8316600a6135c1565b60ff1661016082015260109190911c9061324e61ffff8316600b6135c1565b60ff16610180820152919050565b80516020808301516040808501516060860151608087015160a088015160c089015160e08a01516101008b01516101208c01516101408d01516101608e01516101808f01519a5160009e6132b49e909d9c9101613e5c565b60408051601f19818403018152919052805160209091012092915050565b6132dc83836136e3565b6132e96000848484613831565b61089c5760405162461bcd60e51b815260040161081d90613f69565b816001600160a01b0316836001600160a01b031614156133675760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161081d565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6133df848484612707565b6133eb84848484613831565b610a515760405162461bcd60e51b815260040161081d90613f69565b6000600161341484612e85565b61341e919061424d565b600083815260076020526040902054909150808214613471576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906134b69060019061424d565b600083815260096020526040812054600880549394509092849081106134ec57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050806008838154811061351b57634e487b7160e01b600052603260045260246000fd5b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061356157634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061358883612e85565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b60008060138360ff16600c81106135e857634e487b7160e01b600052603260045260246000fd5b01546135f49085614316565b905060138360ff16600c811061361a57634e487b7160e01b600052603260045260246000fd5b018160ff168154811061363d57634e487b7160e01b600052603260045260246000fd5b60009182526020918290209181049091015460ff601f9092166101000a90048116600886901c9091161015613673579050610b7c565b601f8360ff16600c811061369757634e487b7160e01b600052603260045260246000fd5b018160ff16815481106136ba57634e487b7160e01b600052603260045260246000fd5b90600052602060002090602091828204019190069054906101000a900460ff1691505092915050565b6001600160a01b0382166137395760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161081d565b6000818152600260205260409020546001600160a01b03161561379e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161081d565b6137aa60008383613008565b6001600160a01b03821660009081526003602052604081208054600192906137d3908490614235565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b1561393357604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290613875903390899088908890600401613f19565b602060405180830381600087803b15801561388f57600080fd5b505af19250505080156138bf575060408051601f3d908101601f191682019092526138bc91810190613d40565b60015b613919573d8080156138ed576040519150601f19603f3d011682016040523d82523d6000602084013e6138f2565b606091505b5080516139115760405162461bcd60e51b815260040161081d90613f69565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506126ff565b506001949350505050565b604080516101a081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081019190915290565b8035801515811461072c57600080fd5b6000602082840312156139cb578081fd5b8135610b798161437a565b6000602082840312156139e7578081fd5b8151610b798161437a565b60008060408385031215613a04578081fd5b8235613a0f8161437a565b91506020830135613a1f8161437a565b809150509250929050565b600080600060608486031215613a3e578081fd5b8335613a498161437a565b92506020840135613a598161437a565b91506040840135613a698161437a565b809150509250925092565b600080600060608486031215613a88578283fd5b8335613a938161437a565b92506020840135613aa38161437a565b929592945050506040919091013590565b600080600080600060808688031215613acb578081fd5b8535613ad68161437a565b94506020860135613ae68161437a565b93506040860135925060608601356001600160401b0380821115613b08578283fd5b818801915088601f830112613b1b578283fd5b813581811115613b29578384fd5b896020828501011115613b3a578384fd5b9699959850939650602001949392505050565b60008060008060808587031215613b62578384fd5b8435613b6d8161437a565b93506020850135613b7d8161437a565b92506040850135915060608501356001600160401b03811115613b9e578182fd5b8501601f81018713613bae578182fd5b8035613bc1613bbc826141e8565b6141b8565b818152886020838501011115613bd5578384fd5b81602084016020830137908101602001929092525092959194509250565b60008060408385031215613c05578182fd5b8235613c108161437a565b9150613c1e602084016139aa565b90509250929050565b60008060408385031215613c39578182fd5b8235613c448161437a565b946020939093013593505050565b60006020808385031215613c64578182fd5b82356001600160401b0380821115613c7a578384fd5b818501915085601f830112613c8d578384fd5b813581811115613c9f57613c9f614364565b8381029150613caf8483016141b8565b8181528481019084860184860187018a1015613cc9578788fd5b8795505b83861015613cfd578035945061ffff85168514613ce8578788fd5b84835260019590950194918601918601613ccd565b5098975050505050505050565b600060208284031215613d1b578081fd5b610b79826139aa565b600060208284031215613d35578081fd5b8135610b798161438f565b600060208284031215613d51578081fd5b8151610b798161438f565b600060208284031215613d6d578081fd5b81516001600160401b03811115613d82578182fd5b8201601f81018413613d92578182fd5b8051613da0613bbc826141e8565b818152856020838501011115613db4578384fd5b613dc5826020830160208601614264565b95945050505050565b600060208284031215613ddf578081fd5b5035919050565b600060208284031215613df7578081fd5b5051919050565b60008060408385031215613e10578182fd5b50508035926020909101359150565b60008151808452613e37816020860160208601614264565b601f01601f19169290920160200192915050565b60f81b6001600160f81b0319169052565b60008e151560f81b825260ff60f81b8e60f81b166001830152613e82600283018e613e4b565b613e8f600383018d613e4b565b613e9c600483018c613e4b565b613ea9600583018b613e4b565b613eb6600683018a613e4b565b613ec36007830189613e4b565b613ed06008830188613e4b565b613edd6009830187613e4b565b613eea600a830186613e4b565b613ef7600b830185613e4b565b613f04600c830184613e4b565b50600d019d9c50505050505050505050505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613f4c90830184613e1f565b9695505050505050565b600060208252610b796020830184613e1f565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526019908201527f4f6e6c792061646d696e732063616e2063616c6c207468697300000000000000604082015260600190565b602080825260119082015270686d6d6d6d207768617420646f696e673f60781b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b8151151581526101a0810160208301516140ec602084018260ff169052565b506040830151614101604084018260ff169052565b506060830151614116606084018260ff169052565b50608083015161412b608084018260ff169052565b5060a083015161414060a084018260ff169052565b5060c083015161415560c084018260ff169052565b5060e083015161416a60e084018260ff169052565b506101008381015160ff908116918401919091526101208085015182169084015261014080850151821690840152610160808501518216908401526101809384015116929091019190915290565b604051601f8201601f191681016001600160401b03811182821017156141e0576141e0614364565b604052919050565b60006001600160401b0382111561420157614201614364565b50601f01601f191660200190565b600061ffff80831681851680830382111561422c5761422c614338565b01949350505050565b6000821982111561424857614248614338565b500190565b60008282101561425f5761425f614338565b500390565b60005b8381101561427f578181015183820152602001614267565b83811115610a515750506000910152565b6002810460018216806142a457607f821691505b6020821081141561083257634e487b7160e01b600052602260045260246000fd5b600061ffff808316818114156142dd576142dd614338565b6001019392505050565b60006000198214156142fb576142fb614338565b5060010190565b6000826143115761431161434e565b500690565b600060ff8316806143295761432961434e565b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461096057600080fd5b6001600160e01b03198116811461096057600080fdfea2646970667358221220d09efbebbcfcf3c2272b2e4058569db64dea4e4a698b90576e0a269efdda331d64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addAdmin(address)": {
        "params": {
          "addr": "the address to enable"
        }
      },
      "isMarine(uint256)": {
        "params": {
          "tokenId": "the ID of the token to check"
        },
        "returns": {
          "_0": "marine - whether or not a token is a Marines"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "removeAdmin(address)": {
        "params": {
          "addr": "the address to disbale"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addAdmin(address)": {
        "notice": "enables an address to mint / burn"
      },
      "burn(uint256)": {
        "notice": "Burn a token - any game logic should be handled before this function."
      },
      "isMarine(uint256)": {
        "notice": "checks if a token is a Marines"
      },
      "mint(address,uint256)": {
        "notice": "Mint a token - any payment / game logic should be handled in the game contract.  This will just generate random traits and mint a token to a designated address."
      },
      "removeAdmin(address)": {
        "notice": "disables an address from minting / burning"
      },
      "setAirdropMintingCount(uint256)": {
        "notice": "set the number of tokens to mint at a time for airdrop."
      },
      "setAirdropStage(bool)": {
        "notice": "start or end airdrop stage"
      },
      "setPaidTokens(uint256)": {
        "notice": "updates the number of tokens for sale"
      },
      "setPaused(bool)": {
        "notice": "enables owner to pause / unpause minting"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2640,
        "contract": "contracts/MnA.sol:MnA",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2642,
        "contract": "contracts/MnA.sol:MnA",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2646,
        "contract": "contracts/MnA.sol:MnA",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2650,
        "contract": "contracts/MnA.sol:MnA",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2654,
        "contract": "contracts/MnA.sol:MnA",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2660,
        "contract": "contracts/MnA.sol:MnA",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3594,
        "contract": "contracts/MnA.sol:MnA",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3598,
        "contract": "contracts/MnA.sol:MnA",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3601,
        "contract": "contracts/MnA.sol:MnA",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3605,
        "contract": "contracts/MnA.sol:MnA",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1512,
        "contract": "contracts/MnA.sol:MnA",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 1627,
        "contract": "contracts/MnA.sol:MnA",
        "label": "_paused",
        "offset": 20,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 5488,
        "contract": "contracts/MnA.sol:MnA",
        "label": "maxTokens",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 5491,
        "contract": "contracts/MnA.sol:MnA",
        "label": "PAID_TOKENS",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 5494,
        "contract": "contracts/MnA.sol:MnA",
        "label": "airdropMintingCount",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 5497,
        "contract": "contracts/MnA.sol:MnA",
        "label": "minted",
        "offset": 0,
        "slot": "14",
        "type": "t_uint16"
      },
      {
        "astId": 5499,
        "contract": "contracts/MnA.sol:MnA",
        "label": "isAirdropStage",
        "offset": 2,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 5504,
        "contract": "contracts/MnA.sol:MnA",
        "label": "tokenTraits",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_struct(MarineAlien)11611_storage)"
      },
      {
        "astId": 5508,
        "contract": "contracts/MnA.sol:MnA",
        "label": "existingCombinations",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5513,
        "contract": "contracts/MnA.sol:MnA",
        "label": "lastWriteAddress",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_struct(LastWrite)5461_storage)"
      },
      {
        "astId": 5518,
        "contract": "contracts/MnA.sol:MnA",
        "label": "lastWriteToken",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_struct(LastWrite)5461_storage)"
      },
      {
        "astId": 5523,
        "contract": "contracts/MnA.sol:MnA",
        "label": "rarities",
        "offset": 0,
        "slot": "19",
        "type": "t_array(t_array(t_uint8)dyn_storage)12_storage"
      },
      {
        "astId": 5528,
        "contract": "contracts/MnA.sol:MnA",
        "label": "aliases",
        "offset": 0,
        "slot": "31",
        "type": "t_array(t_array(t_uint8)dyn_storage)12_storage"
      },
      {
        "astId": 5531,
        "contract": "contracts/MnA.sol:MnA",
        "label": "stakingPool",
        "offset": 0,
        "slot": "43",
        "type": "t_contract(IStakingPool)11742"
      },
      {
        "astId": 5534,
        "contract": "contracts/MnA.sol:MnA",
        "label": "traits",
        "offset": 0,
        "slot": "44",
        "type": "t_contract(ITraits)11752"
      },
      {
        "astId": 5537,
        "contract": "contracts/MnA.sol:MnA",
        "label": "randomSeedGenerator",
        "offset": 0,
        "slot": "45",
        "type": "t_contract(IRandomSeedGenerator)11709"
      },
      {
        "astId": 5540,
        "contract": "contracts/MnA.sol:MnA",
        "label": "founderPass",
        "offset": 0,
        "slot": "46",
        "type": "t_contract(IFounderPass)11579"
      },
      {
        "astId": 5544,
        "contract": "contracts/MnA.sol:MnA",
        "label": "admins",
        "offset": 0,
        "slot": "47",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_array(t_uint8)dyn_storage)12_storage": {
        "base": "t_array(t_uint8)dyn_storage",
        "encoding": "inplace",
        "label": "uint8[][12]",
        "numberOfBytes": "384"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IFounderPass)11579": {
        "encoding": "inplace",
        "label": "contract IFounderPass",
        "numberOfBytes": "20"
      },
      "t_contract(IRandomSeedGenerator)11709": {
        "encoding": "inplace",
        "label": "contract IRandomSeedGenerator",
        "numberOfBytes": "20"
      },
      "t_contract(IStakingPool)11742": {
        "encoding": "inplace",
        "label": "contract IStakingPool",
        "numberOfBytes": "20"
      },
      "t_contract(ITraits)11752": {
        "encoding": "inplace",
        "label": "contract ITraits",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(LastWrite)5461_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MnA.LastWrite)",
        "numberOfBytes": "32",
        "value": "t_struct(LastWrite)5461_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(LastWrite)5461_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MnA.LastWrite)",
        "numberOfBytes": "32",
        "value": "t_struct(LastWrite)5461_storage"
      },
      "t_mapping(t_uint256,t_struct(MarineAlien)11611_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IMnA.MarineAlien)",
        "numberOfBytes": "32",
        "value": "t_struct(MarineAlien)11611_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LastWrite)5461_storage": {
        "encoding": "inplace",
        "label": "struct MnA.LastWrite",
        "members": [
          {
            "astId": 5458,
            "contract": "contracts/MnA.sol:MnA",
            "label": "time",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 5460,
            "contract": "contracts/MnA.sol:MnA",
            "label": "blockNum",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(MarineAlien)11611_storage": {
        "encoding": "inplace",
        "label": "struct IMnA.MarineAlien",
        "members": [
          {
            "astId": 11586,
            "contract": "contracts/MnA.sol:MnA",
            "label": "isMarine",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 11588,
            "contract": "contracts/MnA.sol:MnA",
            "label": "M_Weapon",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 11590,
            "contract": "contracts/MnA.sol:MnA",
            "label": "M_Back",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 11592,
            "contract": "contracts/MnA.sol:MnA",
            "label": "M_Headgear",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 11594,
            "contract": "contracts/MnA.sol:MnA",
            "label": "M_Eyes",
            "offset": 4,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 11596,
            "contract": "contracts/MnA.sol:MnA",
            "label": "M_Emblem",
            "offset": 5,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 11598,
            "contract": "contracts/MnA.sol:MnA",
            "label": "M_Body",
            "offset": 6,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 11600,
            "contract": "contracts/MnA.sol:MnA",
            "label": "A_Headgear",
            "offset": 7,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 11602,
            "contract": "contracts/MnA.sol:MnA",
            "label": "A_Eye",
            "offset": 8,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 11604,
            "contract": "contracts/MnA.sol:MnA",
            "label": "A_Back",
            "offset": 9,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 11606,
            "contract": "contracts/MnA.sol:MnA",
            "label": "A_Mouth",
            "offset": 10,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 11608,
            "contract": "contracts/MnA.sol:MnA",
            "label": "A_Body",
            "offset": 11,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 11610,
            "contract": "contracts/MnA.sol:MnA",
            "label": "rankIndex",
            "offset": 12,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
